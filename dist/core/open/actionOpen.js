"use strict";const t=require("../../untils/logs"),o=require("../../untils/common"),{platforms:a}=require("../../constants/platforms"),e=require("./common"),n=async(e,n,i,r)=>{const c=e&&e.toLowerCase().trim();var u=a[c];if(!u){let e=await o.askPlatform();if(!(u=a[e]))return void t.logFatal(`Only support ${a} now.`)}await s(u,n,r)};async function s(t,a,e){const n=new Map([["ios",async()=>{await o.runTask("Opening the Xcode workspace...",(o=>i(t,a,o)))}],["android",async()=>{await o.runTask("Opening the Android Studio...",(o=>r(t,a,o,e)))}]]).get(t);n&&n()}async function i(t,a,n){const s=await e.findXcodePath(t,a);if(!s)throw new Error("Xcode workspace does not exist. Please add first.");{const t=await Promise.resolve().then((()=>require("open")));await t(s,{wait:!1}),n("opened"),await o.wait(3e3)}}async function r(o,a,n,s){const i=e.getAndroidActions(o,a,n,s).get(process.platform);i||t.logFatal("Not support system"),i&&await i()}module.exports={openPlatform:n};