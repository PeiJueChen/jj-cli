"use strict";const e=require("../../untils/logs"),n=require("../../untils/fs"),s=require("../../untils/format"),t=require("../../untils/common"),a=require("../../constants/platforms"),{runCommand:i,commandExec:o}=require("../../untils/terminal"),r=require("path"),l="sign.config.json",c="C:\\Users\\aigens-pc\\Desktop\\Android-sign\\sign.config.json",p="/Users/chenpeijue/Desktop/Android-sign/sign.config.json";var g,u,d;const f=async(n,s,t,i,o)=>{g=o||s,u=s,d=i;const r=n&&n.toLowerCase().trim();var l=a[r];if(!l)return void e.logFatal(`Only support ${Object.keys(a)} now.`);const c=new Map([["ios",async()=>{}],["android",async()=>{await $(l)}]]).get(n);c&&c()},y=s=>{s||e.logFatal("Missing file");const t=r.resolve(g,...s.split("/"));return n.existsSync(t)||e.logFatal(`Cannot find file: ${s}`),t},j=s=>{const t=s.unsignedApk;var a=r.resolve(u,"app-release-unsigned.apk");if((i=a&&n.existsSync(a))||(i=(a=r.isAbsolute(t)&&r.resolve(t)||null)&&n.existsSync(a)),!i){a=r.resolve(g,...t.split("/"));var i=n.existsSync(a)}i||e.logFatal("Cannot find app-release-unsigned.apk"),s.unsignedApk=a},m=async()=>{let s=r.resolve(g,l);n.existsSync(s)||(s="win32"===process.platform?c:"darwin"===process.platform?p:"",s&&n.existsSync(s)||e.logFatal("Cannot find sign config file"),g=r.join(s,"../"));var t=await n.readFileContentAsync(s);return t||e.logFatal(`${l} is empty.`),"string"==typeof t&&(t=JSON.parse(t)),j(t),t},w=async n=>{const s=n.projects||[];if(d){const e=s.find((e=>~e.project.indexOf(d)));if(e)return e}const a=s.map((e=>e&&e.project||""));a.some((e=>!e))&&e.logFatal("Please write all `project` field as project name");const i=await t.askSelectList(a,"Project");return s.find((e=>e.project===i))},k=async(e,t)=>{const a=t&&t.project,i=r.join(e,"../","signedApks");await n.mkdirAsyncRecursive(i);const o=`${a}-signed-${s.formatDate((new Date).getTime(),"yyyy-MM-dd-[hh-mm-ss]")}.apk`;return r.resolve(i,o)},v=e=>{n.existsSync(e)&&n.unlinkSync(e)},S=(e,n)=>{const s=r.join(e,"../",`${n}-unsigned-temp.apk`);return v(s),s};async function $(n){await t.isInstalled("jarsigner")||e.logFatal("Cannot find `jarsigner`"),await t.isInstalled("zipalign")||e.logFatal("Cannot find `zipalign`");const s=await m(),a=s.unsignedApk,i=await w(s);e.logFriendly(`Your Project is : ${i.project}`);const l=i.keyStoreFile,c=y(l),p=i.alias||s.defaultAlias;p||e.logFatal("Cannot find alias");const g=i.storepass||i.keypass,u=i.keypass||i.storepass;g&&u||e.logFatal("Cannot find storepass / keypass");const d=await k(c,i),f=S(d,i.project);console.log("JJ ~ file: action.js ~ line 126 ~ sign ~ genTempPath",f);try{e.blue("................... Zipalign Start ..................."),await o(`zipalign -v -p 4 ${a} ${f}`),e.blue("................... Zipalign End ..................."),e.blue("..........................................................................................."),e.blue("................... Sign Start ..................."),await o(`jarsigner -verbose -keystore ${c} -storepass ${g} -keypass ${u} -signedjar ${d} ${f} ${p}`),v(f),e.blue("................... Sign End ..................."),e.green(`Signed ${i.project}`);const n=await Promise.resolve().then((()=>require("open")));await n(r.join(d,"../"),{wait:!1})}catch(n){e.logError(n)}}module.exports={signPlatform:f};