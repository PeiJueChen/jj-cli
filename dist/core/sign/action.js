"use strict";const e=require("../../untils/logs"),s=require("../../untils/fs"),t=require("../../untils/format"),a=require("../../untils/common"),n=require("../../constants/platforms"),{runCommand:r,commandExec:i}=require("../../untils/terminal"),o=require("path"),l="sign.config.json";var c;const g=async(s,t,a)=>{c=t;const r=s&&s.toLowerCase().trim();var i=n[r];if(!i)return void e.logFatal(`Only support ${Object.keys(n)} now.`);const o=new Map([["ios",async()=>{}],["android",async()=>{await f(i,t)}]]).get(s);o&&o()},p=t=>{t||e.logFatal("Missing file");const a=o.resolve(c,...t.split("/"));return s.existsSync(a)||e.logFatal(`Cannot find file: ${t}`),a},u=async()=>{const t=o.resolve(c,l);s.existsSync(t)||e.logFatal("Cannot find sign config file");var a=await s.readFileContentAsync(t);return a||e.logFatal(`${l} is empty.`),"string"==typeof a&&(a=JSON.parse(a)),a},y=async s=>{const t=s.projects||[],n=t.map((e=>e&&e.project||""));n.some((e=>!e))&&e.logFatal("Please write all `project` field as project name");const r=await a.askSelectList(n,"Project");return t.find((e=>e.project===r))},d=async(e,a)=>{const n=a&&a.project,r=o.join(e,"../","signedOutApk");await s.mkdirAsyncRecursive(r);const i=`${n}-signed-${t.formatDate((new Date).getTime(),"yyyy-MM-dd-[hh-mm-ss]")}.apk`;return o.resolve(r,i)};async function f(s,t){await a.isInstalled("jarsigner")||e.logFatal("Cannot find `jarsigner`, Please install first.");const n=await u(),r=n.unsignedApk,l=p(r),c=await y(n),g=c.keyStoreFile,f=p(g),m=c.alias||n.defaultAlias;m||e.logFatal("Cannot find alias");const w=c.storepass||c.keypass,j=c.keypass||c.storepass;w&&j||e.logFatal("Cannot find storepass / keypass");const k=await d(f,c);try{e.blue("Start Sign..."),await i(`jarsigner -verbose -keystore ${f} -storepass ${w} -keypass ${j} -signedjar ${k} ${l} ${m}`),e.green(`Signed ${c.project}`);const s=await Promise.resolve().then((()=>require("open")));await s(o.join(k,"../"),{wait:!1})}catch(s){e.logError(s)}}module.exports={signPlatform:g};