"use strict";const n=require("../../untils/logs"),e=require("../../untils/fs"),s=require("../../untils/format"),t=require("../../untils/common"),a=require("../../constants/platforms"),{runCommand:i,commandExec:o}=require("../../untils/terminal"),r=require("path"),l="sign.config.json",c="C:\\Users\\aigens-pc\\Desktop\\Android-sign\\sign.config.json",p="/Users/chenpeijue/Desktop/Android-sign/sign.config.json";var g,d;const u=async(e,s,t,i)=>{g=s,d=i;const o=e&&e.toLowerCase().trim();var r=a[o];if(!r)return void n.logFatal(`Only support ${Object.keys(a)} now.`);const l=new Map([["ios",async()=>{}],["android",async()=>{await $(r)}]]).get(e);l&&l()},f=s=>{s||n.logFatal("Missing file");const t=r.resolve(g,...s.split("/"));return e.existsSync(t)||n.logFatal(`Cannot find file: ${s}`),t},y=async()=>{let s=r.resolve(g,l);e.existsSync(s)||(s="win32"===process.platform?c:"darwin"===process.platform?p:"",s&&e.existsSync(s)||n.logFatal("Cannot find sign config file"),g=r.join(s,"../"));var t=await e.readFileContentAsync(s);return t||n.logFatal(`${l} is empty.`),"string"==typeof t&&(t=JSON.parse(t)),t},j=async e=>{const s=e.projects||[];if(d){const n=s.find((n=>~n.project.indexOf(d)));if(n)return n}const a=s.map((n=>n&&n.project||""));a.some((n=>!n))&&n.logFatal("Please write all `project` field as project name");const i=await t.askSelectList(a,"Project");return s.find((n=>n.project===i))},m=async(n,t)=>{const a=t&&t.project,i=r.join(n,"../","signedApks");await e.mkdirAsyncRecursive(i);const o=`${a}-signed-${s.formatDate((new Date).getTime(),"yyyy-MM-dd-[hh-mm-ss]")}.apk`;return r.resolve(i,o)},w=n=>{e.existsSync(n)&&e.unlinkSync(n)},k=(n,e)=>{const s=r.join(n,"../",`${e}-unsigned-temp.apk`);return w(s),s};async function $(e){await t.isInstalled("jarsigner")||n.logFatal("Cannot find `jarsigner`"),await t.isInstalled("zipalign")||n.logFatal("Cannot find `zipalign`");const s=await y(),a=s.unsignedApk,i=f(a),l=await j(s);n.logFriendly(`Your Project is : ${l.project}`);const c=l.keyStoreFile,p=f(c),g=l.alias||s.defaultAlias;g||n.logFatal("Cannot find alias");const d=l.storepass||l.keypass,u=l.keypass||l.storepass;d&&u||n.logFatal("Cannot find storepass / keypass");const $=await m(p,l),F=k($,l.project);console.log("JJ ~ file: action.js ~ line 126 ~ sign ~ genTempPath",F);try{n.blue("................... Zipalign Start ..................."),await o(`zipalign -v -p 4 ${i} ${F}`),n.blue("................... Zipalign End ..................."),n.blue("................... Sign Start ..................."),await o(`jarsigner -verbose -keystore ${p} -storepass ${d} -keypass ${u} -signedjar ${$} ${F} ${g}`),w(F),n.blue("................... Sign End ..................."),n.green(`Signed ${l.project}`);const e=await Promise.resolve().then((()=>require("open")));await e(r.join($,"../"),{wait:!1})}catch(e){n.logError(e)}}module.exports={signPlatform:u};