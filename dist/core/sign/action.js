"use strict";const e=require("../../untils/logs"),s=require("../../untils/fs"),t=require("../../untils/format"),a=require("../../untils/common"),n=require("../../constants/platforms"),{runCommand:i,commandExec:r}=require("../../untils/terminal"),o=require("path"),l="sign.config.json",c="",p="/Users/chenpeijue/Desktop/Android-sign/sign.config.json";var g;const u=async(s,t,a)=>{g=t;const i=s&&s.toLowerCase().trim();var r=n[i];if(!r)return void e.logFatal(`Only support ${Object.keys(n)} now.`);const o=new Map([["ios",async()=>{}],["android",async()=>{await j(r)}]]).get(s);o&&o()},d=t=>{t||e.logFatal("Missing file");const a=o.resolve(g,...t.split("/"));return s.existsSync(a)||e.logFatal(`Cannot find file: ${t}`),a},y=async()=>{let t=o.resolve(g,l);s.existsSync(t)||(t="win32"===process.platform?"":"darwin"===process.platform?p:"",t&&s.existsSync(t)||e.logFatal("Cannot find sign config file"),g=o.join(t,"../"));var a=await s.readFileContentAsync(t);return a||e.logFatal(`${l} is empty.`),"string"==typeof a&&(a=JSON.parse(a)),a},f=async s=>{const t=s.projects||[],n=t.map((e=>e&&e.project||""));n.some((e=>!e))&&e.logFatal("Please write all `project` field as project name");const i=await a.askSelectList(n,"Project");return t.find((e=>e.project===i))},m=async(e,a)=>{const n=a&&a.project,i=o.join(e,"../","signedOutApk");await s.mkdirAsyncRecursive(i);const r=`${n}-signed-${t.formatDate((new Date).getTime(),"yyyy-MM-dd-[hh-mm-ss]")}.apk`;return o.resolve(i,r)};async function j(s){await a.isInstalled("jarsigner")||e.logFatal("Cannot find `jarsigner`, Please install first.");const t=await y(),n=t.unsignedApk,i=d(n),l=await f(t),c=l.keyStoreFile,p=d(c),g=l.alias||t.defaultAlias;g||e.logFatal("Cannot find alias");const u=l.storepass||l.keypass,j=l.keypass||l.storepass;u&&j||e.logFatal("Cannot find storepass / keypass");const w=await m(p,l);try{e.blue("Start Sign..."),await r(`jarsigner -verbose -keystore ${p} -storepass ${u} -keypass ${j} -signedjar ${w} ${i} ${g}`),e.green(`Signed ${l.project}`);const s=await Promise.resolve().then((()=>require("open")));await s(o.join(w,"../"),{wait:!1})}catch(s){e.logError(s)}}module.exports={signPlatform:u};