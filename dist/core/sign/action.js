"use strict";const e=require("../../untils/logs"),n=require("../../untils/fs"),s=require("../../untils/format"),t=require("../../untils/common"),a=require("../../constants/platforms"),{runCommand:i,commandExec:o}=require("../../untils/terminal"),r=require("path"),l="sign.config.json",c="",p="/Users/chenpeijue/Desktop/Android-sign/sign.config.json";var g,u;const d=async(n,s,t,i)=>{g=s,u=i;const o=n&&n.toLowerCase().trim();var r=a[o];if(!r)return void e.logFatal(`Only support ${Object.keys(a)} now.`);const l=new Map([["ios",async()=>{}],["android",async()=>{await k(r)}]]).get(n);l&&l()},f=s=>{s||e.logFatal("Missing file");const t=r.resolve(g,...s.split("/"));return n.existsSync(t)||e.logFatal(`Cannot find file: ${s}`),t},y=async()=>{let s=r.resolve(g,l);n.existsSync(s)||(s="win32"===process.platform?"":"darwin"===process.platform?p:"",s&&n.existsSync(s)||e.logFatal("Cannot find sign config file"),g=r.join(s,"../"));var t=await n.readFileContentAsync(s);return t||e.logFatal(`${l} is empty.`),"string"==typeof t&&(t=JSON.parse(t)),t},m=async n=>{const s=n.projects||[];if(u){const e=s.find((e=>~e.project.indexOf(u)));if(e)return e}const a=s.map((e=>e&&e.project||""));a.some((e=>!e))&&e.logFatal("Please write all `project` field as project name");const i=await t.askSelectList(a,"Project");return s.find((e=>e.project===i))},j=async(e,t)=>{const a=t&&t.project,i=r.join(e,"../","signedApks");await n.mkdirAsyncRecursive(i);const o=`${a}-signed-${s.formatDate((new Date).getTime(),"yyyy-MM-dd-[hh-mm-ss]")}.apk`;return r.resolve(i,o)},w=e=>{n.existsSync(e)&&n.unlinkSync(e)},$=(e,n)=>{const s=r.join(e,"../",`${n}-unsigned-temp.apk`);return w(s),s};async function k(n){await t.isInstalled("jarsigner")||e.logFatal("Cannot find `jarsigner`"),await t.isInstalled("zipalign")||e.logFatal("Cannot find `zipalign`");const s=await y(),a=s.unsignedApk,i=f(a),l=await m(s);e.logFriendly(`Your Project is : ${l.project}`);const c=l.keyStoreFile,p=f(c),g=l.alias||s.defaultAlias;g||e.logFatal("Cannot find alias");const u=l.storepass||l.keypass,d=l.keypass||l.storepass;u&&d||e.logFatal("Cannot find storepass / keypass");const k=await j(p,l),F=$(k,l.project);console.log("JJ ~ file: action.js ~ line 126 ~ sign ~ genTempPath",F);try{e.blue("................... Zipalign Start ..................."),await o(`zipalign -v -p 4 ${i} ${F}`),e.blue("................... Zipalign End ..................."),e.blue("................... Sign Start ..................."),await o(`jarsigner -verbose -keystore ${p} -storepass ${u} -keypass ${d} -signedjar ${k} ${F} ${g}`),w(F),e.blue("................... Sign End ..................."),e.green(`Signed ${l.project}`);const n=await Promise.resolve().then((()=>require("open")));await n(r.join(k,"../"),{wait:!1})}catch(n){e.logError(n)}}module.exports={signPlatform:d};